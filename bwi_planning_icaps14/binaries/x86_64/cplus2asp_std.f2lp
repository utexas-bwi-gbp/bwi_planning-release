% Standard description-independent declarations and laws to CCalc-ify ASP.

% A derived binary relation between a constant and its domain objects,
% connected via constant_sort and sort_object.

%-------------------------------------------------------------
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%-------------------------------------------------------------

query_label(query). % Selects which query to activate in a based on the value of the const "query".

constant_object(V_constant,Object) <- 
   constant_sort(V_constant,V_sort) & 
   sort_object(V_sort,Object).

% constant_posobject relates constants with their positive objects.
% positive objects are defined to be any object that is not 'none'
% (multi-valued) or 'false' (boolean).

constant_posobject(V_constant,Object) <-
  constant_object(V_constant,Object)
  & constant_sort(V_constant, boolean)
  & Object != false.

constant_posobject(V_constant,Object) <-
  constant_object(V_constant,Object)
  & not constant_sort(V_constant, boolean)
  & Object != none.

% constant_negobject relates constants with their negative object.
% negative objects are false (boolean) and none (non-boolean).
constant_negobject(V_constant,false) <-
  constant_sort(V_constant, boolean).

constant_negobject(V_constant,none) <-
  not constant_sort(V_constant, boolean)
  & constant(V_constant).


%-------------------------------------------------------------
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%-------------------------------------------------------------

% Standard, description-independent declarations of sorts and domains.

step(0..maxstep).
astep(1..maxstep).

#domain step(V_step).
#domain astep(V_astep).

sort(boolean).
#domain boolean(V_boolean).
sort_object(boolean,V_boolean).

boolean(true).
boolean(false).


sort(computed).
#domain computed(V_computed).
sort_object(computed,V_computed).

% Constants hierarchy

% Meta-constants to group categories of constants.

sort(constant).
#domain constant(V_constant).
sort_object(constant,V_constant).

%----

% Rigid constants
sort(rigid).
#domain rigid(V_rigid). 
sort_object(rigid,V_rigid). 

%---

% Fluent-based constants.

sort(fluent).
#domain fluent(V_fluent). 
sort_object(fluent,V_fluent). 

sort(simpleFluent).
#domain simpleFluent(V_simpleFluent). 
sort_object(simpleFluent,V_simpleFluent). 

sort(inertialFluent).
#domain inertialFluent(V_inertialFluent).
sort_object(inertialFluent,V_inertialFluent). 

sort(sdFluent).
#domain sdFluent(V_sdFluent). 
sort_object(sdFluent,V_sdFluent). 

sort(abFluent).
#domain abFluent(V_abFluent).
sort_object(abFluent,V_abFluent).

%---

% Action-based constants.

sort(action).
#domain action(V_action).
sort_object(action,V_action). 

sort(exogenousAction).
#domain exogenousAction(V_exogenousAction).
sort_object(exogenousAction,V_exogenousAction). 

sort(abAction).
#domain abAction(V_abAction).
sort_object(abAction,V_abAction). 

sort(attribute).
#domain attribute(V_attribute). 
sort_object(attribute,V_attribute). 

% A regular action is defined to be any action which isn't an abAction or attribute.
sort(regularAction).
#domain regularAction(V_regularAction).
sort_object(regularAction,V_regularAction).

%---

% Abnormality constants

sort(abnormality).
#domain abnormality(V_abnormality).
sort_object(abnormality,V_abnormality).

sort(staticAbnormality).
#domain staticAbnormality(V_staticAbnormality).
sort_object(staticAbnormality,V_staticAbnormality).

sort(dynamicAbnormality).
#domain dynamicAbnormality(V_dynamicAbnormality).
sort_object(dynamicAbnormality,V_dynamicAbnormality).

%---

% Subsort relations.

constant(V_fluent). 
constant(V_action). 
constant(V_rigid).
constant(V_abnormality).
fluent(V_simpleFluent). 
simpleFluent(V_inertialFluent). 
fluent(V_sdFluent).
sdFluent(V_abFluent).
action(V_exogenousAction). 
action(V_abAction). 
action(V_attribute). 

regularAction(V_action) <-
	not attribute(V_action)
	& not abAction(V_action).

abnormality(V_staticAbnormality).
abnormality(V_dynamicAbnormality).

% Note: This isn't necessary for abnormality constants.


%-------------------------------------------------------------
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%-------------------------------------------------------------

%%% Description-independent rules to CCalc-ify ASP @ t=0.

% Exogeneity for exogenous actions.
exogenous(V_exogenousAction).

% Exogeneity for attributes.
exogenous(V_attribute).

% Inertia for inertial fluents
inertial(V_inertialFluent).

% anyInitialState: Exogeneity for simple fluents at time 0.
{h(eql(V_simpleFluent,Object),0)} <- constant_object(V_simpleFluent,Object).


% exogenous: Grants exogeneity to a constant.

% Rigids
{h(eql(V_rigid,Value))} <- 
   exogenous(V_rigid) &
   constant_object(V_rigid,Value).

% Existence and uniqueness for every constant relative to its domain.

% Rigid
false <- not 1{ h(eql(V_rigid,Object1)) : constant_object(V_rigid,Object1) }1.


%-------------------------------------------------------------
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%-------------------------------------------------------------

%%% Description-independent rules to CCalc-ify ASP @ t>0.

% abActions default to false.
{occ(eql(V_abAction,false),V_astep-1)}. 

% Default false for abFluents
{h(eql(V_abFluent,X),V_step)} <- constant_negobject(V_abFluent,X).


% Restriction that attributes must take on the value "none" if and only if their linked action does not execute.
false <- 
   not (( occ(eql(V_attribute,NegObj1),V_astep-1) -> occ(eql(V_action,NegObj2),V_astep-1) ) &
        ( occ(eql(V_action,NegObj2),V_astep-1) -> occ(eql(V_attribute,NegObj1),V_astep-1) )) &
   action_attribute(V_action,V_attribute) & constant_negobject(V_attribute, NegObj1) & constant_negobject(V_action, NegObj2).


% exogenous: Grants exogeneity to a constant.

% Actions
{occ(eql(V_action,Value),V_astep-1)} <- 
   exogenous(V_action) &
   constant_object(V_action,Value).

% Fluents
{h(eql(V_fluent,Value),V_step)} <- 
   exogenous(V_fluent) &
   constant_object(V_fluent,Value).

% Abnormality constants should also be exogenous
{ab_h(V_staticAbnormality,V_step)}.
{ab_h(V_dynamicAbnormality,V_astep-1)}.

% inertial: Grants inertia to a (non-rigid) fluent.

{h(eql(V_fluent,Value),V_astep)} <- 
   inertial(V_fluent) & 
   h(eql(V_fluent,Value),V_astep-1) & 
   constant_object(V_fluent,Value).

% noconcurrency: If stated as a fact, prevents concurrent execution of Boolean actions.

false <- noconcurrency 
  & 2{ occ(eql(X_action,true),V_astep-1) : action(X_action)}.

% strong_noconcurrency: A stronger version of noconcurrency which prevents 2 of any non-attribute, non abAction 
% action from occurring simultaneously

false <- strong_noconcurrency 
  & 2{ occ(eql(X_action,X_Object),V_astep-1) 
	: regularAction(X_action)
	: constant_posobject(X_action, X_Object)
    }.

% Existence and uniqueness for every constant relative to its domain.

% Fluents (@ t>0)
false <- not 1{ h(eql(V_fluent,Object1),V_step) : constant_object(V_fluent,Object1) }1.

% Actions
false <- not 1{ occ(eql(V_action,Object1),V_astep-1) : constant_object(V_action,Object1) }1.


%-------------------------------------------------------------
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%-------------------------------------------------------------

% Etc
#hide constant_object/2.
#hide constant_posobject/2.
#hide constant_negobject/2.
#hide constant_sort/2.
#hide sort_object/2.
#hide action_attribute/2.
#hide sort/1.
#hide sort_object/2.
#hide boolean/1.
#hide step/1.
#hide astep/1.
#hide constant/1.
#hide fluent/1.
#hide simpleFluent/1.
#hide inertialFluent/1.
#hide sdFluent/1.
#hide abFluent/1.
#hide action/1.
#hide exogenousAction/1.
#hide abAction/1.
#hide attribute/1.
#hide regularAction/1.
#hide abnormality/1.
#hide staticAbnormality/1.
#hide dynamicAbnormality/1.
#hide exogenous/1.
#hide inertial/1.
#hide noconcurrency.
#hide strong_noconcurrency.
#hide query_label/1.
#hide rigid/1.
#hide computed/1.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

